###############################################################################
###############################################################################
##                                                                           ##
##  PRIORITY TODOS                                                           ##
##                                                                           ##
###############################################################################
###############################################################################

 *****************************************************************************
 * General class structure                                                   *
 *****************************************************************************
For classes that need them, implement deep copy and shallow copy methods.
For classes that need them, implement assignment operators and copy
    constructors.
For classes that need them, implement comparison operators.

 *****************************************************************************
 * Shared variable management                                                *
 *****************************************************************************
For class variables that are expected to be freed upon object destruction, but
    which might be shared with other instances (for example, a shallow-copied 
    glslShader), implement a "wrapper" class that will handle freeing these
    variables when the last object that needs it is destructed, and keeps track
    of how many objects reference the variable.

 *****************************************************************************
 * Code quality                                                              *
 *****************************************************************************
Eliminate unneeded class friendships. Add friend functions when appropriate.
Add more comments and improve existing comments.
Make awful code less awful.
Write classes to wrap used glib functionality, when appropriate.
Make the OSD its own class that provides a renderStage for insertion into the
    pipeline

 *****************************************************************************
 * Logging and error handling                                                *
 *****************************************************************************
Use error checking, catching, throwing, and handling when appropriate.
Have bool class methods check for errors more frequently.
Have non-bool class methods throw vbaErr objects when appropriate.
Slim down error handling for non-debug builds.
Currently, our error handling and our logging system don't mesh well. Fix this.
    This may require (another) overhaul of our error handling system.
Handle glib errors.
Have all these functions that return a boolean actually return a boolean
    indicative of whether or not they were successful.

 *****************************************************************************
 * Data integrity                                                            *
 *****************************************************************************
Ensure that, inside your classes, scales and multipliers are always floats.
Behavior upon calling init on an already intiialized object is currnetly
    undefined. Let's handle this.

 *****************************************************************************
 * Pipeline render path                                                      *
 *****************************************************************************
Implement a way for renderStage child classes to expose user-configurable
    configuration options.
Make shader attribute/uniform handling more elegant.
Allow renderStages to use C/C++ implementations of our upscalers.

 *****************************************************************************
 * Shader-related classes                                                    *
 *****************************************************************************
Implement methods for manipulating glsl precompiler directives. (glib might be
    useful here)
Implement a pipeline stage for nearest-neighbor scaling.

 *****************************************************************************
 * Functionality                                                             *
 *****************************************************************************
Port more upscalers and filters to glsl/renderStages
Separate each graphics "component" into individual pipelines
    This will require implementing a final render step that combines each 
        pipeline
Find the bottleneck.
Reduce the number of glTexImage2D calls in the OSD.
    Potential solution: Each glyph should get its own texture (easy)
    Potential solution: Use a texture atlas (harder, preferred)
Make the OSD prettier.
Implement a (new) command line argument parser.

 *****************************************************************************
 * Configuration                                                             *
 *****************************************************************************
Implement a new configuration system. Use glib's key-value file parser.

 *****************************************************************************
 * Bug squashing                                                             *
 *****************************************************************************
Fix problem where audio only works after loading a savestate.
Improve the quality of the SuperEagle shader (most problems are on the edges of
    the screen image)

 *****************************************************************************
 * Project related                                                           *
 *****************************************************************************
Rename git branch to new fork name.
Move to non-fork repo on GitHub once project has diverged enough from VBA-M.
Write a README.md

 *****************************************************************************
 * Miscellaneous                                                             *
 *****************************************************************************
Move all functions which should be inlined into header files.


###############################################################################
###############################################################################
##                                                                           ##
##  POTENTIAL TODOS                                                          ##
##                                                                           ##
###############################################################################
###############################################################################

 *****************************************************************************
 * Efficiency                                                                *
 *****************************************************************************
Create a cache for individual compiled shaders.

 *****************************************************************************
 * Miscellaneous                                                             *
 *****************************************************************************
Use glib for data structures.


###############################################################################
###############################################################################
##                                                                           ##
##  FUTURE TODOS                                                             ##
##                                                                           ##
###############################################################################
###############################################################################

 *****************************************************************************
 * Long-term project goals                                                   *
 *****************************************************************************
Implement a user interface using Nuklear.
Ensure 100% OpenGL ES 2.0 compliance.
Port to Steam Link

 *****************************************************************************
 * Investigatory                                                             *
 *****************************************************************************
EGL stuff
SDL for audio output
SDL for video output
Steam Controller API
Update checker
