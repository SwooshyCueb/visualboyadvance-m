###############################################################################
###############################################################################
##                                                                           ##
##  PRIORITY TODOS                                                           ##
##                                                                           ##
###############################################################################
###############################################################################

 *****************************************************************************
 * General class structure                                                   *
 *****************************************************************************
For classes that need them, implement deep copy and shallow copy methods.
For classes that need them, implement assignment operators and copy
    constructors.
For classes that need them, implement comparison operators.

 *****************************************************************************
 * Shared variable management                                                *
 *****************************************************************************
For class variables that are expected to be freed upon object destruction, but
    which might be shared with other instances (for example, a shallow-copied 
    glslShader), implement a "wrapper" class that will handle freeing these
    variables when the last object that needs it is destructed, and keeps track
    of how many objects reference the variable.

 *****************************************************************************
 * Code quality                                                              *
 *****************************************************************************
Eliminate unneeded class friendships. Add friend functions when appropriate.
Add more comments and improve existing comments.

 *****************************************************************************
 * Error handling                                                            *
 *****************************************************************************
Use error checking, catching, throwing, and handling when appropriate.
Have bool class methods check for errors more frequently.
Have non-bool class methods throw vbaErr objects when appropriate.
Slim down error handling for non-debug builds.

 *****************************************************************************
 * Data integrity                                                            *
 *****************************************************************************
Ensure that, inside your classes, scales and multipliers are always floats.

 *****************************************************************************
 * Pipeline render path                                                      *
 *****************************************************************************
Implement a way for renderStage child classes to expose user-configurable
    configuration options.
Move shader attribute/uniform handling from glslProg into renderStage

 *****************************************************************************
 * Shader-related classes                                                    *
 *****************************************************************************
Implement methods for manipulating glsl precompiler directives. (glib might be
    useful here)

 *****************************************************************************
 * Functionality                                                             *
 *****************************************************************************
Implement an OSD using FreeType2 or stb_truetype
Port more upscalers and filters to glsl/renderStages
Separate each graphics "component" into individual pipelines
    This will require implementing a final render step that combines each 
        pipeline

 *****************************************************************************
 * Bug squashing                                                             *
 *****************************************************************************
Fix problem where audio only works after loading a savestate.

 *****************************************************************************
 * Project related                                                           *
 *****************************************************************************
Come up with a better name than "swooshboy"
Write a README.md


###############################################################################
###############################################################################
##                                                                           ##
##  POTENTIAL TODOS                                                          ##
##                                                                           ##
###############################################################################
###############################################################################

 *****************************************************************************
 * Efficiency                                                                *
 *****************************************************************************
Create a cache for individual compiled shaders.

 *****************************************************************************
 * Data integrity                                                            *
 *****************************************************************************
Use floats inside vbaSize class.

 *****************************************************************************
 * Miscellaneous                                                             *
 *****************************************************************************
Use glib for data structures.


###############################################################################
###############################################################################
##                                                                           ##
##  FUTURE TODOS                                                             ##
##                                                                           ##
###############################################################################
###############################################################################

 *****************************************************************************
 * Long-term project goals                                                   *
 *****************************************************************************
Implement a user interface using Nuklear.
Ensure 100% OpenGL ES 2.0 compliance.
Port to Steam Link

 *****************************************************************************
 * Investigatory                                                             *
 *****************************************************************************
EGL stuff
SDL for audio output
SDL for video output
Steam Controller API
Update checker
